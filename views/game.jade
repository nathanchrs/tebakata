extends layout.jade

block title
	title Tebakata

block navbar
	+navbar('game')

block content

	div.container-fluid

		div.game-question
			span#question Loading...
		
		div.game-hint
			span#hint
			span.badge#countdown

		div#timeline

		form.game-form#answerForm
			div.input-group
				input.form-control#answerBox(type="text", autocomplete="off")
				span.input-group-btn
					button.btn.btn-primary#answerSubmit(type="submit") Jawab

block script

	script(src="/socket.io/socket.io.js")

	script.

		//TODO: tidy up script
		//TODO: add time in timeline

		var TIMELINE_LIMIT = 100;
		var BOTTOM_OFFSET = 80;
		var SCROLL_THRESHOLD = 5;

		var elementCount = 0;

		function adjustTimelineSize(){
			var newHeight = $(window).height() - $('#answerForm').height() - $('#timeline').offset().top - BOTTOM_OFFSET;
			if(newHeight < 0) newHeight = 0;
			$('#timeline').height(newHeight);
		}

		function escapeOutput(str) {
		    var div = document.createElement('div');
		    div.appendChild(document.createTextNode(str));
		    return div.innerHTML;
		};

		function appendTimeline(type, content, forceScroll){
			var timeline = $('#timeline');

			var extracontent = '';
			if(type === 'correct') extracontent = '<span class="icon glyphicon glyphicon-ok"></span>&nbsp;';
			if(type === 'wrong') extracontent = '<span class="icon glyphicon glyphicon-remove"></span>&nbsp;';
			if(type === 'error') extracontent = '<span class="icon glyphicon glyphicon-exclamation-sign"></span>&nbsp;';
			if(type === 'joingame') extracontent = '<span class="icon glyphicon glyphicon-log-in"></span>&nbsp;';
			if(type === 'leavegame') extracontent = '<span class="icon glyphicon glyphicon-log-out"></span>&nbsp;';

			timeline.append('<div class="event ' + type + '">' + extracontent + content + '</div>');

			var scrolledMax = Math.abs(timeline[0].scrollHeight - timeline.scrollTop()) <= SCROLL_THRESHOLD;
			if(forceScroll || scrolledMax) timeline.animate({scrollTop: timeline.prop('scrollHeight')});

			if(elementCount >= TIMELINE_LIMIT){
				timeline[0].removeChild(timeline[0].firstChild);
			} else {
				elementCount++;
			}
		}

		adjustTimelineSize();

		$(window).resize(adjustTimelineSize);

		var currentPlayer = '#{currentPlayer}'; //load current username with page (server-side)

		var socket = io();	
		var	countdown = 0;
		var countdownTimer;

		$(document).ready(function(){
			$('#answerBox').focus();
		});

		socket.on('joingame', function (message){
			appendTimeline('joingame', escapeOutput(message) + ' has joined the game');
		});

		socket.on('leavegame', function (message){
			appendTimeline('leavegame', escapeOutput(message) + ' has left the game');

		});

		socket.on('newword', function (message){
			$('#question').html(message.word);
			$('#hint').html(message.hint);
			countdown = message.countdown;
			$('#countdown').html(countdown);
			$('#answerSubmit').prop("disabled", false);
			clearInterval(countdownTimer);
			countdownTimer = setInterval(countdownTick, 1000);
			adjustTimelineSize();
		});

		socket.on('answerresponse', function (message){
			if(message.status === 'correct'){
				appendTimeline('correct', escapeOutput(message.player) + ' answered correctly, got ' + escapeOutput(message.score) + ' point(s)', message.player === currentPlayer);
				if(message.player === currentPlayer){
					$('#answerSubmit').prop("disabled", true);
				}
			} else if(message.status === 'wrong'){
				appendTimeline('wrong', escapeOutput(message.player) + ' incorrectly answered "' + escapeOutput(message.answer) + '"', message.player === currentPlayer);
			} else {
				appendTimeline('error', 'Error processing answer');
			}
		});

		socket.on('login', function (message){
			window.location = '/login';
		});

		$('form').submit(function(){
			socket.emit('answer', $('#answerBox').val());
			$('#answerBox').val('');
			return false;
		});

		function countdownTick(){
			if(countdown > 0){
				countdown--;
				$('#countdown').html(countdown);
			}
		};